{"version":3,"sources":["components/pages/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Loading","props","error","react_default","a","createElement","onClick","retry","timedOut","pastDelay","asAsync","opts","Loadable","Object","objectSpread","loading","delay","timeout","Welcome","loader","__webpack_require__","e","then","bind","Alarm","Upload","Promise","all","App","BrowserRouter","className","Link","to","Switch","Route","path","exact","component","href","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","ready","unregister","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41e09483.chunk.js","sourcesContent":["import React from 'react'\n\nimport Loadable, { LoadingComponentProps } from 'react-loadable'\n\nfunction Loading(props: LoadingComponentProps) {\n  if (props.error) {\n    return (<div>Error! <button onClick={ props.retry }>Retry</button></div>)\n  } else if (props.timedOut) {\n    return (<div>Taking a long time... <button onClick={ props.retry }>Retry</button></div>)\n  } else if (props.pastDelay) {\n    return (<div>Loading...</div>)\n  } else {\n    return null;\n  }\n}\n\ninterface LoaderOptions<P> {\n  loader(): Promise<React.ComponentType<P> | { default: React.ComponentType<P> }>;\n}\n\nfunction asAsync<P>(opts: LoaderOptions<P> ) {\n  return Loadable({ \n    ...opts, \n    loading: Loading,\n    delay: 100,\n    timeout: 10000\n  });\n}\n\nexport const Welcome = asAsync({ loader: () => import('../pages/Welcome') })\nexport const Alarm = asAsync({ loader: () => import('../pages/Alarm') })\nexport const Upload = asAsync({ loader: () => import('../pages/Upload') })","import React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom';\n\nimport { Alarm, Welcome, Upload } from './components/pages'\n\nimport logo from \"./assets/abstract-vortex-2-512-247726.png\";\nimport \"./App.css\";\n\n\n\nclass App extends Component<{}> {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <div>Wake Up in Surprise</div>\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"64\" /> */}\n          </header>\n          <nav className=\"App-navigation\">\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/upload/\">Upload</Link>\n              </li>\n              <li>\n                <Link to=\"/alarm/\">Alarm</Link>\n              </li>\n            </ul>\n          </nav>\n          <main className=\"App-main\">\n            <Switch>\n              <Route path=\"/\" exact component={Welcome} />\n              <Route path=\"/upload\" component={Upload} />\n              <Route path=\"/alarm\" component={Alarm} />\n              <Route component={Welcome} />\n            </Switch>\n          </main>\n          <footer className=\"App-footer\">\n            <div>This application is made with ðŸ’œ</div>\n            <div>\n              Icon made from{\" \"}\n              <a href=\"http://www.onlinewebfonts.com/icon\">Icon Fonts</a> is\n              licensed by CC BY 3.0\n            </div>\n          </footer>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\nserviceWorker.register({ \n  onUpdate : (registration:any) => console.log('Registration update', registration),\n  onSuccess: (registration:any) => console.log('Registration success', registration),\n});\n"],"sourceRoot":""}