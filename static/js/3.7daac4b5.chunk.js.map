{"version":3,"sources":["components/atoms/FileUpload.tsx","libs/AudioResource.ts","components/pages/Upload.tsx"],"names":["FileUpload","_ref","onFileLoaded","_ref$accept","accept","defaultState","_useState","useState","_useState2","Object","slicedToArray","files","setFiles","_useState3","_useState4","uploadedFiles","setUploadedFiles","useEffect","localFileList","forEach","file","console","log","reader","FileReader","onload","result","concat","onabort","onerror","readAsDataURL","react_default","a","createElement","es","onDrop","acceptedFiles","style","position","margin","width","height","minHeight","borderWidth","borderColor","borderStyle","borderRadius","textAlign","map","key","name","size","localForage","config","version","storeName","description","storeAudio","asyncToGenerator","regenerator_default","mark","_callee","content","wrap","_context","prev","next","setItem","toString","length","stop","this","_x","_x2","apply","arguments","requestAudio","_ref2","_callee2","_context2","getItem","abrupt","sent","_x3","requestAudios","_ref3","_callee3","keys","_context3","Promise","all","Upload","then","v","atoms_FileUpload"],"mappings":"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","file":"static/js/3.7daac4b5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Dropzone from \"react-dropzone\";\n\nexport type FileContent = string | ArrayBuffer;\n\nexport interface FileUploadProps {\n  onFileLoaded?: (file: File, content: FileContent) => void;\n  accept?: string;\n}\n\nconst FileUpload = ({ onFileLoaded, accept = \"audio/*\" }: FileUploadProps) => {\n  const defaultState: File[] = [];\n  const [files, setFiles] = useState(defaultState);\n  const [uploadedFiles, setUploadedFiles] = useState(defaultState);\n\n  useEffect(\n    () => {\n      let localFileList: File[] = [];\n      files.forEach(file => {\n        console.log(file)\n\n        const reader = new FileReader()\n        reader.onload = () => {\n          if (reader.result === null) {\n            return;\n          }\n          onFileLoaded && onFileLoaded(file, reader.result);\n          localFileList = localFileList.concat(file);\n          setUploadedFiles(localFileList);\n        };\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.readAsDataURL(file);\n      });\n    },\n    [files]\n  );\n\n  const onDrop = (acceptedFiles: File[]) => {\n    setUploadedFiles([]);\n    setFiles(acceptedFiles);\n  };\n\n  let css : React.CSSProperties = {\n    position: \"relative\",\n    margin: \"15px\",\n    width: \"calc(100%-30px)\",\n    height: \"calc(100%-30px)\",\n    minHeight: \"200px\",\n    borderWidth: \"2px\",\n    borderColor: \"rgb(102, 102, 102)\",\n    borderStyle: \"dashed\",\n    borderRadius: \"5px\",\n    textAlign: \"left\",\n  }\n\n  return (\n    <Dropzone onDrop={onDrop} accept={accept} style={css}>\n      <ul>\n        {uploadedFiles.map(file => (\n          <li key={file.name}>\n            {file.name} - {file.size}\n          </li>\n        ))}\n      </ul>\n    </Dropzone>\n  );\n};\n\nexport default FileUpload;\n","import localForage from 'localforage'\nimport { FileContent } from '../components/atoms/FileUpload';\n\nlocalForage.config({\n  name: 'WUIS',\n  version: 1,\n  storeName: 'audio',\n  description: 'Audio files'\n})\n\nconst storeAudio = async (name: string, content: FileContent) => {\n  await localForage.setItem(name, content);\n  console.log(name, content.toString().length);\n}\n\nconst requestAudio = async (name: string) => {\n  return await localForage.getItem<FileContent>(name);\n}\n\nconst requestAudios = async () => {\n  const keys = await localForage.keys()\n  return Promise.all(keys.map(key => requestAudio(key)));\n}\n\nexport { storeAudio, requestAudios }","import React from 'react'\n\nimport FileUpload, { FileContent } from \"../atoms/FileUpload\";\nimport { storeAudio, requestAudios } from '../../libs/AudioResource'\n\nconst Upload = () => {\n  const onFileLoaded = async (file: File, content: FileContent) => {\n    await storeAudio(file.name, content);\n  };\n\n  requestAudios().then(v => {\n    console.log(v)\n  });\n\n  return (\n    <div>\n      <h1>Upload</h1>\n      <FileUpload onFileLoaded={onFileLoaded} />\n    </div>\n  );\n};\nexport default Upload;\n"],"sourceRoot":""}