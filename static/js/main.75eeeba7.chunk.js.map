{"version":3,"sources":["components/atoms/AudioPlayer.tsx","libs/Hash.ts","libs/AudioModel.ts","libs/ApiClient.ts","App.tsx","serviceWorker.js","index.tsx","logo.svg"],"names":["AudioPlayer","_ref","url","_useState","useState","_useState2","Object","slicedToArray","isPlaying","setIsPlaying","audioRef","React","createRef","useEffect","current","play","pause","react_default","a","createElement","style","color","onClick","ref","controls","preload","src","type","reduce","previousHash","code","hashId","s","concat","Math","abs","split","map","char","charCodeAt","hashCode","toString","AudioFile","name","classCallCheck","this","model","fetchAudioFiles","_fetchAudioFiles","apply","arguments","_callee4","regenerator_default","wrap","_context4","prev","next","abrupt","stop","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","audioFiles","setState","className","logo","alt","href","target","rel","audioFile","key","id","atoms_AudioPlayer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.75eeeba7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\ninterface AudioPlayerProps {\r\n  url: string\r\n}\r\n\r\nfunction AudioPlayer({ url }: AudioPlayerProps) {\r\n  const [isPlaying, setIsPlaying] = useState(false)\r\n\r\n  const audioRef = React.createRef<HTMLAudioElement>();\r\n\r\n  function togglePlaying() {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      if (isPlaying) {\r\n        audioRef.current.play();\r\n      } else {\r\n        audioRef.current.pause();\r\n      }\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div style={{color:'black'}}>\r\n      <div onClick={togglePlaying}>Audio {url}</div>\r\n      <div>Playing: {isPlaying?'playing':'paused'}</div>\r\n      <audio ref={audioRef} controls preload=\"\" >\r\n        <source src={url} type=\"audio/mpeg\" />\r\n        Browser does not support audio\r\n      </audio>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AudioPlayer","function reduce(previousHash: number, code: number) {\n  return previousHash + ((previousHash << 7) + (previousHash << 3) ^ code)\n}\n\nexport function hashCode(s:string) {\n  return s\n    .split('')\n    .map(char => char.charCodeAt(0))\n    .reduce(reduce, 5381)\n}\n\nexport function hashId(s:string) {\n  return \"_id_\".concat(Math.abs(hashCode(s)).toString(36))\n}\n","import { hashId } from \"./Hash\";\n\nclass AudioFile {\n  public constructor(public name: string, public url: string) {\n  }\n\n  public get id() {\n    return hashId(this.url);\n  }\n}\n\nexport default AudioFile;\n","import AudioFile from './AudioModel';\n\nconst model : AudioFile[] = [\n  new AudioFile('Alien Spaceship UFO Sound', 'http://soundbible.com/grab.php?id=2213&type=mp3'),\n  new AudioFile('Unknown', 'https://dl.last.fm/static/1541758312/131211148/0528f9c2cc9140584bc2c4fc6c9eac85b6c66fe58a4c064cd0b68cbeba633225/Death+Grips+-+Get+Got.mp3')\n]\n\ninterface IFetchOptions  {\n  search?: string;\n}\n\nasync function fetchSoundBibleFiles({}: IFetchOptions = {}) : Promise<AudioFile[]> {\n  const result = Array.from(Array(1).keys())\n    .map(async (_:any, index:number) => {\n      const id = index+1;\n      const url = `http://soundbible.com/grab.php?id=${id}&type=mp3`\n      const name = `Soundbible ${id}`\n    \n      const info = await fetch(url, { method: 'GET', referrer:'no-referrer', mode:'no-cors' })\n      console.log(await info);\n\n    return new AudioFile(name, url)\n  })\n  return Promise.all(result);\n}\n\nasync function fetchFreesoundFiles({}: IFetchOptions = {}) : Promise<AudioFile[]> {\n  return [\n    new AudioFile('Hinkypunk 1O81', 'https://freesound.org/people/Setuniman/sounds/382909/download/382909__setuniman__hinkypunk-1o81.mp3')\n  ]\n}\n\nexport async function fetchAudioFiles() : Promise<AudioFile[]> {\n  return model;//.concat( await fetchSoundBibleFiles());\n}\n","import React, { Component } from 'react';\n\nimport AudioPlayer from './components/atoms/AudioPlayer'\n\nimport logo from './logo.svg';\nimport './App.css';\nimport AudioFile from './libs/AudioModel';\nimport { fetchAudioFiles } from './libs/ApiClient';\n\ninterface IAppState {\n  audioFiles: AudioFile[]\n}\n\nclass App extends Component<{}, IAppState> {\n  constructor(props:Readonly<{}>) {\n    super(props)\n    this.state = { audioFiles: [] };\n  }\n  public async componentDidMount() {\n    const audioFiles = await fetchAudioFiles();\n    this.setState({ audioFiles });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        { this.state.audioFiles.map((audioFile) => (\n          <div key={audioFile.id} >\n            <div>\"{audioFile.id}\"</div>\n            <AudioPlayer url={audioFile.url} />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}