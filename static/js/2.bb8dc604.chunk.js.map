{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js","../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/atoms/AudioPlayer.tsx","libs/Hash.ts","libs/AudioModel.ts","libs/ApiClient.ts","components/pages/Alarm.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","__webpack_require__","d","__webpack_exports__","module","exports","g","this","self","Function","hadRuntime","regeneratorRuntime","Object","getOwnPropertyNames","indexOf","oldRuntime","e","global","Op","prototype","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","then","result","toString","keys","object","key","reverse","pop","Context","reset","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","stop","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","error","return","info","pushTryEntry","locs","iteratorMethod","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","AudioPlayer","_ref","url","_useState","useState","_useState2","slicedToArray","isPlaying","setIsPlaying","audioRef","React","createRef","useEffect","current","play","pause","react_default","a","createElement","style","backgroundColor","color","margin","padding","onClick","preventDefault","ref","preload","loop","src","reduce","previousHash","code","hashId","s","concat","Math","abs","split","map","char","charCodeAt","hashCode","AudioFile","classCallCheck","model","fetchAudioFiles","_fetchAudioFiles","_callee4","regenerator_default","_context4","Alarm","props","_this","possibleConstructorReturn","audioFiles","ApiClient","files","setState","audioFile","id","atoms_AudioPlayer","Component"],"mappings":"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","file":"static/js/2.bb8dc604.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React, { useState, useEffect } from \"react\";\r\n\r\ninterface AudioPlayerProps {\r\n  url: string;\r\n  name?: string;\r\n}\r\n\r\nfunction AudioPlayer({ url, name }: AudioPlayerProps) {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  const audioRef = React.createRef<HTMLAudioElement>();\r\n\r\n  function togglePlaying(e : React.SyntheticEvent) {\r\n    e.preventDefault();\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      if (isPlaying) {\r\n        audioRef.current.play();\r\n      } else {\r\n        audioRef.current.pause();\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"black\",\r\n        color: \"white\",\r\n        margin: \"5px\",\r\n        padding: \"5px\"\r\n      }}\r\n      onClick={togglePlaying}\r\n    >\r\n      <div>{name}</div>\r\n      <div>Playing: {isPlaying ? \"playing\" : \"paused\"}</div>\r\n      <audio ref={audioRef} preload=\"metadata\" loop>\r\n        <source src={url} type=\"audio/mpeg\" />\r\n        Browser does not support audio\r\n      </audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AudioPlayer;\r\n","function reduce(previousHash: number, code: number) {\n  return previousHash + ((previousHash << 7) + (previousHash << 3) ^ code)\n}\n\nexport function hashCode(s:string) {\n  return s\n    .split('')\n    .map(char => char.charCodeAt(0))\n    .reduce(reduce, 5381)\n}\n\nexport function hashId(s:string) {\n  return \"_id_\".concat(Math.abs(hashCode(s)).toString(36))\n}\n","import { hashId } from \"./Hash\";\n\nclass AudioFile {\n  public constructor(public name: string, public url: string) {\n  }\n\n  public get id() {\n    return hashId(this.url);\n  }\n}\n\nexport default AudioFile;\n","import AudioFile from './AudioModel';\n\nconst model : AudioFile[] = [\n  new AudioFile('Alien Spaceship UFO Sound', 'https://soundbible.com/grab.php?id=2213&type=mp3'),\n  // new AudioFile('Unknown', 'https://dl.last.fm/static/1541758312/131211148/0528f9c2cc9140584bc2c4fc6c9eac85b6c66fe58a4c064cd0b68cbeba633225/Death+Grips+-+Get+Got.mp3')\n]\n\ninterface IFetchOptions  {\n  search?: string;\n}\n\nasync function fetchSoundBibleFiles({}: IFetchOptions = {}) : Promise<AudioFile[]> {\n  const result = Array.from(Array(1).keys())\n    .map(async (_:any, index:number) => {\n      const id = index+1;\n      const url = `http://soundbible.com/grab.php?id=${id}&type=mp3`\n      const name = `Soundbible ${id}`\n    \n      const info = await fetch(url, { method: 'GET', referrer:'no-referrer', mode:'no-cors' })\n      console.log(await info);\n\n    return new AudioFile(name, url)\n  })\n  return Promise.all(result);\n}\n\nasync function fetchFreesoundFiles({}: IFetchOptions = {}) : Promise<AudioFile[]> {\n  return [\n    new AudioFile('Hinkypunk 1O81', 'https://freesound.org/people/Setuniman/sounds/382909/download/382909__setuniman__hinkypunk-1o81.mp3')\n  ]\n}\n\nexport async function fetchAudioFiles() : Promise<AudioFile[]> {\n  return model;//.concat( await fetchSoundBibleFiles());\n}\n","import React, { Component } from \"react\";\n\nimport AudioPlayer from \"../atoms/AudioPlayer\";\n\nimport AudioFile from \"../../libs/AudioModel\";\nimport * as ApiClient from \"../../libs/ApiClient\";\n\ninterface IAlarmState {\n  audioFiles: AudioFile[];\n}\n\nexport default class Alarm extends Component<{}, IAlarmState> {\n  constructor(props: Readonly<{}>) {\n    super(props)\n    this.state = { audioFiles: [] }\n  }\n\n  public async componentDidMount() {\n    const files = await ApiClient.fetchAudioFiles();\n    this.setState({ audioFiles: files });\n  }\n\n  public render() {\n    return (\n      <div>\n        <h1>Alarm</h1>\n        <div>\n          {this.state.audioFiles.map(audioFile => (\n            <div key={audioFile.id}>\n              <AudioPlayer {...audioFile} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}