{"version":3,"sources":["components/atoms/FileUpload.tsx","components/pages/Upload.tsx"],"names":["FileUpload","_ref","onFileLoaded","_ref$accept","accept","defaultState","_useState","useState","_useState2","Object","slicedToArray","files","setFiles","_useState3","_useState4","uploadedFiles","setUploadedFiles","useEffect","localFileList","forEach","file","reader","FileReader","onload","result","concat","onabort","console","log","onerror","readAsDataURL","react_default","a","createElement","es","onDrop","acceptedFiles","style","position","margin","width","height","minHeight","borderWidth","borderColor","borderStyle","borderRadius","textAlign","map","key","name","size","Upload","atoms_FileUpload","content","toString","length"],"mappings":"oIAmEeA,EAzDI,SAAAC,GAA2D,IAAxDC,EAAwDD,EAAxDC,aAAwDC,EAAAF,EAA1CG,cAA0C,IAAAD,EAAjC,UAAiCA,EACtEE,EAAuB,GAD+CC,EAElDC,mBAASF,GAFyCG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAErEK,EAFqEH,EAAA,GAE9DI,EAF8DJ,EAAA,GAAAK,EAGlCN,mBAASF,GAHyBS,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGrEE,EAHqED,EAAA,GAGtDE,EAHsDF,EAAA,GAK5EG,oBACE,WACE,IAAIC,EAAwB,GAC5BP,EAAMQ,QAAQ,SAAAC,GACZ,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACQ,OAAlBF,EAAOG,SAGXtB,GAAgBA,EAAakB,EAAMC,EAAOG,QAC1CN,EAAgBA,EAAcO,OAAOL,GACrCJ,EAAiBE,KAEnBG,EAAOK,QAAU,kBAAMC,QAAQC,IAAI,6BACnCP,EAAOQ,QAAU,kBAAMF,QAAQC,IAAI,4BACnCP,EAAOS,cAAcV,MAGzB,CAACT,IAqBH,OACEoB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,OAnBG,SAACC,GACdpB,EAAiB,IACjBJ,EAASwB,IAiBiBhC,OAAQA,EAAQiC,MAdZ,CAC9BC,SAAU,WACVC,OAAQ,OACRC,MAAO,kBACPC,OAAQ,kBACRC,UAAW,QACXC,YAAa,MACbC,YAAa,qBACbC,YAAa,SACbC,aAAc,MACdC,UAAW,SAKThB,EAAAC,EAAAC,cAAA,UACGlB,EAAciC,IAAI,SAAA5B,GAAI,OACrBW,EAAAC,EAAAC,cAAA,MAAIgB,IAAK7B,EAAK8B,MACX9B,EAAK8B,KADR,MACiB9B,EAAK+B,WC5CjBC,UAXA,WAIb,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACoB,EAAD,CAAYnD,aANK,SAACkB,EAAYkC,GAChC3B,QAAQC,IAAIR,EAAK8B,KAAM9B,EAAK+B,KAAMG,EAAQC,WAAWC","file":"static/js/3.28b0ec14.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Dropzone from \"react-dropzone\";\n\nexport type FileContent = string | ArrayBuffer;\n\nexport interface FileUploadProps {\n  onFileLoaded?: (file: File, content: FileContent) => void;\n  accept?: string;\n}\n\nconst FileUpload = ({ onFileLoaded, accept = \"audio/*\" }: FileUploadProps) => {\n  const defaultState: File[] = [];\n  const [files, setFiles] = useState(defaultState);\n  const [uploadedFiles, setUploadedFiles] = useState(defaultState);\n\n  useEffect(\n    () => {\n      let localFileList: File[] = [];\n      files.forEach(file => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          if (reader.result === null) {\n            return;\n          }\n          onFileLoaded && onFileLoaded(file, reader.result);\n          localFileList = localFileList.concat(file);\n          setUploadedFiles(localFileList);\n        };\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.readAsDataURL(file);\n      });\n    },\n    [files]\n  );\n\n  const onDrop = (acceptedFiles: File[]) => {\n    setUploadedFiles([]);\n    setFiles(acceptedFiles);\n  };\n\n  let css : React.CSSProperties = {\n    position: \"relative\",\n    margin: \"15px\",\n    width: \"calc(100%-30px)\",\n    height: \"calc(100%-30px)\",\n    minHeight: \"200px\",\n    borderWidth: \"2px\",\n    borderColor: \"rgb(102, 102, 102)\",\n    borderStyle: \"dashed\",\n    borderRadius: \"5px\",\n    textAlign: \"left\",\n  }\n  \n  return (\n    <Dropzone onDrop={onDrop} accept={accept} style={css}>\n      <ul>\n        {uploadedFiles.map(file => (\n          <li key={file.name}>\n            {file.name} - {file.size}\n          </li>\n        ))}\n      </ul>\n    </Dropzone>\n  );\n};\n\nexport default FileUpload;\n","import React from 'react'\n\nimport FileUpload, { FileContent } from \"../atoms/FileUpload\";\n\nconst Upload = () => {\n  const onFileLoaded = (file: File, content: FileContent) => {\n    console.log(file.name, file.size, content.toString().length);\n  };\n  return (\n    <div>\n      <h1>Upload</h1>\n      <FileUpload onFileLoaded={onFileLoaded} />\n    </div>\n  );\n};\nexport default Upload;\n"],"sourceRoot":""}