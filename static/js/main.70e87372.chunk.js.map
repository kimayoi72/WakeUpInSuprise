{"version":3,"sources":["assets/alarm_clock.svg","components/atoms/AudioPlayer.tsx","components/atoms/Stopwatch.tsx","libs/Hash.ts","libs/AudioModel.ts","libs/ApiClient.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","__webpack_require__","p","AudioPlayer","_ref","url","name","_useState","useState","_useState2","Object","slicedToArray","isPlaying","setIsPlaying","audioRef","React","createRef","useEffect","current","play","pause","react_default","a","createElement","style","backgroundColor","color","margin","padding","onClick","e","preventDefault","ref","preload","loop","src","type","Stopwatch","degree","setDegree","handle","setInterval","clearInterval","xmlns","xmlnsXlink","viewBox","transform","concat","d","reduce","previousHash","code","hashId","s","Math","abs","split","map","char","charCodeAt","hashCode","toString","AudioFile","classCallCheck","this","model","fetchAudioFiles","_fetchAudioFiles","apply","arguments","_callee4","regenerator_default","wrap","_context4","prev","next","abrupt","stop","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","audioFiles","ApiClient","setState","className","logo","alt","atoms_Stopwatch","audioFile","key","id","atoms_AudioPlayer","href","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","ready","unregister","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70e87372.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm_clock.fa3ac914.svg\";","import React, { useState, useEffect } from \"react\";\r\n\r\ninterface AudioPlayerProps {\r\n  url: string;\r\n  name?: string;\r\n}\r\n\r\nfunction AudioPlayer({ url, name }: AudioPlayerProps) {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  const audioRef = React.createRef<HTMLAudioElement>();\r\n\r\n  function togglePlaying(e : React.SyntheticEvent) {\r\n    e.preventDefault();\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      if (isPlaying) {\r\n        audioRef.current.play();\r\n      } else {\r\n        audioRef.current.pause();\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"black\",\r\n        color: \"white\",\r\n        margin: \"5px\",\r\n        padding: \"5px\"\r\n      }}\r\n      onClick={togglePlaying}\r\n    >\r\n      <div>{name}</div>\r\n      <div>Playing: {isPlaying ? \"playing\" : \"paused\"}</div>\r\n      <audio ref={audioRef} preload=\"metadata\" loop>\r\n        <source src={url} type=\"audio/mpeg\" />\r\n        Browser does not support audio\r\n      </audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AudioPlayer;\r\n","import React, { useState, useEffect } from \"react\";\n\nconst Stopwatch = () => {\n  const [degree, setDegree] = useState(0.0)\n\n  useEffect(() => {\n    const handle = setInterval(() => { setDegree(degree + 5)}, 1000)\n    return () => clearInterval(handle)\n  })\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      viewBox=\"0 0 1000 1000\"\n      style={{transform: `rotate(${degree}deg)`}}\n    >\n      <g>\n        <path d=\"M640.4,727.1L438.8,525.4V255h122.5v219.6l165.8,165.8L640.4,727.1z M500,10C229.4,10,10,229.4,10,500s219.4,490,490,490s490-219.4,490-490S770.6,10,500,10z M500,867.5C297,867.5,132.5,703,132.5,500c0-203,164.5-367.5,367.5-367.5c203,0,367.5,164.5,367.5,367.5C867.5,703,703,867.5,500,867.5z\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default Stopwatch;\n","function reduce(previousHash: number, code: number) {\n  return previousHash + ((previousHash << 7) + (previousHash << 3) ^ code)\n}\n\nexport function hashCode(s:string) {\n  return s\n    .split('')\n    .map(char => char.charCodeAt(0))\n    .reduce(reduce, 5381)\n}\n\nexport function hashId(s:string) {\n  return \"_id_\".concat(Math.abs(hashCode(s)).toString(36))\n}\n","import { hashId } from \"./Hash\";\n\nclass AudioFile {\n  public constructor(public name: string, public url: string) {\n  }\n\n  public get id() {\n    return hashId(this.url);\n  }\n}\n\nexport default AudioFile;\n","import AudioFile from './AudioModel';\n\nconst model : AudioFile[] = [\n  new AudioFile('Alien Spaceship UFO Sound', 'https://soundbible.com/grab.php?id=2213&type=mp3'),\n  new AudioFile('Unknown', 'https://dl.last.fm/static/1541758312/131211148/0528f9c2cc9140584bc2c4fc6c9eac85b6c66fe58a4c064cd0b68cbeba633225/Death+Grips+-+Get+Got.mp3')\n]\n\ninterface IFetchOptions  {\n  search?: string;\n}\n\nasync function fetchSoundBibleFiles({}: IFetchOptions = {}) : Promise<AudioFile[]> {\n  const result = Array.from(Array(1).keys())\n    .map(async (_:any, index:number) => {\n      const id = index+1;\n      const url = `http://soundbible.com/grab.php?id=${id}&type=mp3`\n      const name = `Soundbible ${id}`\n    \n      const info = await fetch(url, { method: 'GET', referrer:'no-referrer', mode:'no-cors' })\n      console.log(await info);\n\n    return new AudioFile(name, url)\n  })\n  return Promise.all(result);\n}\n\nasync function fetchFreesoundFiles({}: IFetchOptions = {}) : Promise<AudioFile[]> {\n  return [\n    new AudioFile('Hinkypunk 1O81', 'https://freesound.org/people/Setuniman/sounds/382909/download/382909__setuniman__hinkypunk-1o81.mp3')\n  ]\n}\n\nexport async function fetchAudioFiles() : Promise<AudioFile[]> {\n  return model;//.concat( await fetchSoundBibleFiles());\n}\n","import React, { Component } from \"react\";\n\nimport logo from \"./assets/alarm_clock.svg\";\nimport \"./App.css\";\n\nimport AudioFile from \"./libs/AudioModel\";\nimport AudioPlayer from \"./components/atoms/AudioPlayer\";\nimport Stopwatch from \"./components/atoms/Stopwatch\";\n\nimport * as ApiClient from \"./libs/ApiClient\";\n\ninterface IAppState {\n  audioFiles: AudioFile[];\n}\n\nclass App extends Component<{}, IAppState> {\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = { audioFiles: [] };\n  }\n  public async componentDidMount() {\n    const audioFiles = await ApiClient.fetchAudioFiles();\n    this.setState({ audioFiles });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <aside className=\"App-aside\">\n          <Stopwatch />\n        </aside>\n        <main className=\"App-main\">\n          {this.state.audioFiles.map(audioFile => (\n            <div key={audioFile.id}>\n              <AudioPlayer {...audioFile} />\n            </div>\n          ))}\n        </main>\n        <footer className=\"App-footer\">\n          <div>This application is made with 💜</div>\n          <div>\n            Icon made from{\" \"}\n            <a href=\"http://www.onlinewebfonts.com/icon\">Icon Fonts</a> is\n            licensed by CC BY 3.0\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\nserviceWorker.register({ \n  onUpdate : (registration:any) => console.log('Registration update', registration),\n  onSuccess: (registration:any) => console.log('Registration success', registration),\n});\n"],"sourceRoot":""}