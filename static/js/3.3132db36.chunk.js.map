{"version":3,"sources":["components/atoms/FileUpload.tsx","libs/AudioResource.ts","components/pages/Upload.tsx"],"names":["css","position","margin","width","height","minHeight","borderWidth","borderColor","borderStyle","borderRadius","textAlign","FileUpload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDrop","acceptedFiles","setState","uploadedFiles","files","localFileList","state","forEach","file","reader","FileReader","onload","result","onFileLoaded","concat","onabort","console","log","onerror","readAsDataURL","_this2","react_default","a","createElement","es","accept","_ref","getRootProps","getInputProps","isDragActive","assign","style","map","key","name","size","length","Component","localForage","config","version","storeName","description","storeAudio","asyncToGenerator","regenerator_default","mark","_callee","content","wrap","_context","prev","next","setItem","toString","stop","_x","_x2","apply","arguments","requestAudio","_ref2","_callee2","_context2","getItem","abrupt","sent","_x3","requestAudios","_ref3","_callee3","keys","_context3","Promise","all","Upload","then","v","atoms_FileUpload"],"mappings":"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","file":"static/js/3.3132db36.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Dropzone from \"react-dropzone\";\n\nexport type FileContent = string | ArrayBuffer;\n\nexport interface FileUploadProps {\n  onFileLoaded?: (file: File, content: FileContent) => void;\n  accept?: string;\n}\n\ninterface FileUploadState {\n  files: File[];\n  uploadedFiles: File[];\n}\n\nconst css: React.CSSProperties = {\n  position: \"relative\",\n  margin: \"15px\",\n  width: \"calc(100%-30px)\",\n  height: \"calc(100%-30px)\",\n  minHeight: \"200px\",\n  borderWidth: \"2px\",\n  borderColor: \"rgb(102, 102, 102)\",\n  borderStyle: \"dashed\",\n  borderRadius: \"5px\",\n  textAlign: \"left\"\n};\n\nclass FileUpload extends Component<FileUploadProps, FileUploadState> {\n  constructor(props: Readonly<FileUploadProps>) {\n    super(props);\n    this.state = {\n      files: [],\n      uploadedFiles: []\n    };\n  }\n\n  onDrop = (acceptedFiles: File[]) => {\n    this.setState(\n      {\n        uploadedFiles: [],\n        files: acceptedFiles\n      },\n      () => {\n        let localFileList: File[] = [];\n        this.state.files.forEach(file => {\n          const reader = new FileReader();\n          reader.onload = () => {\n            if (reader.result === null) return;\n            this.props.onFileLoaded &&\n              this.props.onFileLoaded(file, reader.result);\n            localFileList = localFileList.concat(file);\n            this.setState({ uploadedFiles: localFileList });\n          };\n          reader.onabort = () => console.log(\"file reading was aborted\");\n          reader.onerror = () => console.log(\"file reading has failed\");\n          reader.readAsDataURL(file);\n        });\n      }\n    );\n  };\n\n  public render() {\n    return (\n      <Dropzone onDrop={this.onDrop} accept={this.props.accept}>\n        {({ getRootProps, getInputProps, isDragActive }) => {\n          return (\n            <div {...getRootProps()} style={css}>\n              <input {...getInputProps()} />\n              <ul>\n                {this.state.uploadedFiles.map(file => (\n                  <li key={file.name}>\n                    {file.name} - {file.size} bytes\n                  </li>\n                ))}\n              </ul>\n              {this.state.uploadedFiles.length == 0 ? (\n                isDragActive ? (\n                  <p>Drop files here...</p>\n                ) : (\n                  <p>\n                    Try dropping some files here, or click to select files to\n                    upload.\n                  </p>\n                )\n              ) : (\n                <p />\n              )}\n            </div>\n          );\n        }}\n      </Dropzone>\n    );\n  }\n}\n\nexport default FileUpload;\n","import localForage from 'localforage'\nimport { FileContent } from '../components/atoms/FileUpload';\n\nlocalForage.config({\n  name: 'WUIS',\n  version: 1,\n  storeName: 'audio',\n  description: 'Audio files'\n})\n\nconst storeAudio = async (name: string, content: FileContent) => {\n  await localForage.setItem(name, content);\n  console.log(name, content.toString().length);\n}\n\nconst requestAudio = async (name: string) => {\n  return await localForage.getItem<FileContent>(name);\n}\n\nconst requestAudios = async () => {\n  const keys = await localForage.keys()\n  return Promise.all(keys.map(key => requestAudio(key)));\n}\n\nexport { storeAudio, requestAudios }","import React from 'react'\n\nimport FileUpload, { FileContent } from \"../atoms/FileUpload\";\nimport { storeAudio, requestAudios } from '../../libs/AudioResource'\n\nconst Upload = () => {\n  const onFileLoaded = async (file: File, content: FileContent) => {\n    await storeAudio(file.name, content);\n  };\n\n  requestAudios().then(v => {\n    console.log(v)\n  });\n\n  return (\n    <div>\n      <h1>Upload</h1>\n      <FileUpload onFileLoaded={onFileLoaded} />\n    </div>\n  );\n};\nexport default Upload;\n"],"sourceRoot":""}